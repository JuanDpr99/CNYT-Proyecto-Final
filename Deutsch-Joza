import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit import Aer
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

def main():
    # Use Aer's qasm_simulator
    simulator = Aer.get_backend('qasm_simulator')
    # Create a Quantum Circuit con 2 entradas y 3 salidas
    circuit = QuantumCircuit(3, 3)

    #Entradas
    #circuit.x(0) #|100>
    #circuit.x(1) #|010>
    #circuit.x(2) #|001>

    circuit.barrier(0,1,2)
    #Funcion Uf
    #funcion1(circuit)
    #funcion2(circuit)
    
    circuit.barrier(0,1,2)  #a√±adiendo barreras 

    # Map the quantum measurement to the classical bits
    circuit.measure([0,1,2], [2,1,0])
    #circuit.measure(0,2)
    #circuit.measure(1,1)
    #circuit.measure(2,0)

    # compile the circuit down to low-level QASM instructions
    # supported by the backend (not needed for simple circuits)
    compiled_circuit = transpile(circuit, simulator)
    # Execute the circuit on the qasm simulator
    job = simulator.run(compiled_circuit, shots=1000)
    # Grab results from the job
    result = job.result()

    # Returns counts
    counts = result.get_counts(circuit)
    print("\nTotal count for 00 and 11 are:",counts)
    # Draw the circuit
    print(circuit)
    # Plot a histogram
    plot_histogram(counts)
    plt.show()

def funcion1(_circuit):
    _circuit.cx(0,2)

def funcion2(_circuit):
    _circuit.x(2)
